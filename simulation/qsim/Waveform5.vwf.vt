// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/02/2022 21:43:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          check_overflow
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module check_overflow_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in_data;
reg [4:0] in_reg;
reg is_add_i;
reg is_add_rtype;
reg is_sub_rtype;
reg overflow;
// wires                                               
wire [31:0] out_data;
wire [4:0] out_reg;

// assign statements (if any)                          
check_overflow i1 (
// port map - connection between master ports and signals/registers   
	.in_data(in_data),
	.in_reg(in_reg),
	.is_add_i(is_add_i),
	.is_add_rtype(is_add_rtype),
	.is_sub_rtype(is_sub_rtype),
	.out_data(out_data),
	.out_reg(out_reg),
	.overflow(overflow)
);
initial 
begin 
#1000000 $finish;
end 
// in_data[ 31 ]
initial
begin
	in_data[31] = 1'b1;
end 
// in_data[ 30 ]
initial
begin
	in_data[30] = 1'b1;
end 
// in_data[ 29 ]
initial
begin
	in_data[29] = 1'b1;
end 
// in_data[ 28 ]
initial
begin
	in_data[28] = 1'b1;
end 
// in_data[ 27 ]
initial
begin
	in_data[27] = 1'b1;
end 
// in_data[ 26 ]
initial
begin
	in_data[26] = 1'b1;
end 
// in_data[ 25 ]
initial
begin
	in_data[25] = 1'b1;
end 
// in_data[ 24 ]
initial
begin
	in_data[24] = 1'b1;
end 
// in_data[ 23 ]
initial
begin
	in_data[23] = 1'b1;
end 
// in_data[ 22 ]
initial
begin
	in_data[22] = 1'b1;
end 
// in_data[ 21 ]
initial
begin
	in_data[21] = 1'b1;
end 
// in_data[ 20 ]
initial
begin
	in_data[20] = 1'b1;
end 
// in_data[ 19 ]
initial
begin
	in_data[19] = 1'b1;
end 
// in_data[ 18 ]
initial
begin
	in_data[18] = 1'b1;
end 
// in_data[ 17 ]
initial
begin
	in_data[17] = 1'b1;
end 
// in_data[ 16 ]
initial
begin
	in_data[16] = 1'b1;
end 
// in_data[ 15 ]
initial
begin
	in_data[15] = 1'b1;
end 
// in_data[ 14 ]
initial
begin
	in_data[14] = 1'b1;
end 
// in_data[ 13 ]
initial
begin
	in_data[13] = 1'b1;
end 
// in_data[ 12 ]
initial
begin
	in_data[12] = 1'b1;
end 
// in_data[ 11 ]
initial
begin
	in_data[11] = 1'b1;
end 
// in_data[ 10 ]
initial
begin
	in_data[10] = 1'b1;
end 
// in_data[ 9 ]
initial
begin
	in_data[9] = 1'b1;
end 
// in_data[ 8 ]
initial
begin
	in_data[8] = 1'b1;
end 
// in_data[ 7 ]
initial
begin
	in_data[7] = 1'b1;
end 
// in_data[ 6 ]
initial
begin
	in_data[6] = 1'b1;
end 
// in_data[ 5 ]
initial
begin
	in_data[5] = 1'b1;
end 
// in_data[ 4 ]
initial
begin
	in_data[4] = 1'b1;
end 
// in_data[ 3 ]
initial
begin
	in_data[3] = 1'b0;
end 
// in_data[ 2 ]
initial
begin
	in_data[2] = 1'b1;
end 
// in_data[ 1 ]
initial
begin
	in_data[1] = 1'b0;
end 
// in_data[ 0 ]
initial
begin
	in_data[0] = 1'b1;
end 
// in_reg[ 4 ]
initial
begin
	in_reg[4] = 1'b0;
end 
// in_reg[ 3 ]
initial
begin
	in_reg[3] = 1'b1;
end 
// in_reg[ 2 ]
initial
begin
	in_reg[2] = 1'b1;
end 
// in_reg[ 1 ]
initial
begin
	in_reg[1] = 1'b0;
end 
// in_reg[ 0 ]
initial
begin
	in_reg[0] = 1'b0;
end 

// is_add_i
initial
begin
	is_add_i = 1'b0;
end 

// is_add_rtype
initial
begin
	is_add_rtype = 1'b1;
end 

// is_sub_rtype
initial
begin
	is_sub_rtype = 1'b0;
end 

// overflow
initial
begin
	overflow = 1'b1;
end 
endmodule

