// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2022 10:21:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          program_counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module program_counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg enable;
reg [11:0] in;
// wires                                               
wire [11:0] out;

// assign statements (if any)                          
program_counter i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.enable(enable),
	.in(in),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// clr
initial
begin
	clr = 1'b1;
	clr = #100000 1'b0;
end 

// enable
initial
begin
	enable = 1'b1;
end 
// in[ 11 ]
initial
begin
	in[11] = 1'b0;
end 
// in[ 10 ]
initial
begin
	in[10] = 1'b0;
end 
// in[ 9 ]
initial
begin
	in[9] = 1'b0;
end 
// in[ 8 ]
initial
begin
	in[8] = 1'b0;
end 
// in[ 7 ]
initial
begin
	in[7] = 1'b0;
end 
// in[ 6 ]
initial
begin
	in[6] = 1'b0;
end 
// in[ 5 ]
initial
begin
	in[5] = 1'b0;
	in[5] = #800000 1'b1;
end 
// in[ 4 ]
initial
begin
	in[4] = 1'b0;
	in[4] = #400000 1'b1;
	in[4] = #400000 1'b0;
end 
// in[ 3 ]
initial
begin
	repeat(2)
	begin
		in[3] = 1'b0;
		in[3] = #200000 1'b1;
		# 200000;
	end
	in[3] = 1'b0;
end 
// in[ 2 ]
always
begin
	in[2] = 1'b0;
	in[2] = #100000 1'b1;
	#100000;
end 
// in[ 1 ]
initial
begin
	in[1] = 1'b0;
end 
// in[ 0 ]
initial
begin
	in[0] = 1'b0;
end 
endmodule

