// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2022 18:45:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          pc_adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] in1;
reg is_blt;
reg is_bne;
reg is_less_than;
reg is_not_eq;
reg is_not_jtype;
reg [16:0] n;
reg [26:0] t;
// wires                                               
wire [11:0] out;

// assign statements (if any)                          
pc_adder i1 (
// port map - connection between master ports and signals/registers   
	.in1(in1),
	.is_blt(is_blt),
	.is_bne(is_bne),
	.is_less_than(is_less_than),
	.is_not_eq(is_not_eq),
	.is_not_jtype(is_not_jtype),
	.n(n),
	.out(out),
	.t(t)
);
initial 
begin 
#1000000 $finish;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b0;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b0;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b0;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b1;
end 

// is_blt
initial
begin
	is_blt = 1'b0;
	is_blt = #500000 1'b1;
	is_blt = #290000 1'b0;
end 

// is_bne
initial
begin
	is_bne = 1'b1;
	is_bne = #410000 1'b0;
end 

// is_less_than
initial
begin
	is_less_than = 1'b1;
	# 100000;
	repeat(4)
	begin
		is_less_than = 1'b0;
		is_less_than = #100000 1'b1;
		# 100000;
	end
	is_less_than = 1'b0;
end 

// is_not_eq
initial
begin
	is_not_eq = 1'b1;
	is_not_eq = #180000 1'b0;
	is_not_eq = #480000 1'b1;
	is_not_eq = #250000 1'b0;
end 

// is_not_jtype
initial
begin
	is_not_jtype = 1'b1;
	is_not_jtype = #760000 1'b0;
	is_not_jtype = #120000 1'b1;
end 
// n[ 16 ]
initial
begin
	n[16] = 1'b0;
end 
// n[ 15 ]
initial
begin
	n[15] = 1'b0;
end 
// n[ 14 ]
initial
begin
	n[14] = 1'b0;
end 
// n[ 13 ]
initial
begin
	n[13] = 1'b0;
end 
// n[ 12 ]
initial
begin
	n[12] = 1'b0;
end 
// n[ 11 ]
initial
begin
	n[11] = 1'b0;
end 
// n[ 10 ]
initial
begin
	n[10] = 1'b0;
end 
// n[ 9 ]
initial
begin
	n[9] = 1'b0;
end 
// n[ 8 ]
initial
begin
	n[8] = 1'b0;
end 
// n[ 7 ]
initial
begin
	n[7] = 1'b0;
end 
// n[ 6 ]
initial
begin
	n[6] = 1'b0;
end 
// n[ 5 ]
initial
begin
	n[5] = 1'b0;
end 
// n[ 4 ]
initial
begin
	n[4] = 1'b0;
end 
// n[ 3 ]
initial
begin
	n[3] = 1'b0;
end 
// n[ 2 ]
initial
begin
	n[2] = 1'b0;
end 
// n[ 1 ]
initial
begin
	n[1] = 1'b1;
end 
// n[ 0 ]
initial
begin
	n[0] = 1'b0;
end 
// t[ 26 ]
initial
begin
	t[26] = 1'b0;
end 
// t[ 25 ]
initial
begin
	t[25] = 1'b0;
end 
// t[ 24 ]
initial
begin
	t[24] = 1'b0;
end 
// t[ 23 ]
initial
begin
	t[23] = 1'b0;
end 
// t[ 22 ]
initial
begin
	t[22] = 1'b0;
end 
// t[ 21 ]
initial
begin
	t[21] = 1'b0;
end 
// t[ 20 ]
initial
begin
	t[20] = 1'b0;
end 
// t[ 19 ]
initial
begin
	t[19] = 1'b0;
end 
// t[ 18 ]
initial
begin
	t[18] = 1'b0;
end 
// t[ 17 ]
initial
begin
	t[17] = 1'b0;
end 
// t[ 16 ]
initial
begin
	t[16] = 1'b0;
end 
// t[ 15 ]
initial
begin
	t[15] = 1'b0;
end 
// t[ 14 ]
initial
begin
	t[14] = 1'b0;
end 
// t[ 13 ]
initial
begin
	t[13] = 1'b0;
end 
// t[ 12 ]
initial
begin
	t[12] = 1'b0;
end 
// t[ 11 ]
initial
begin
	t[11] = 1'b0;
end 
// t[ 10 ]
initial
begin
	t[10] = 1'b0;
end 
// t[ 9 ]
initial
begin
	t[9] = 1'b0;
end 
// t[ 8 ]
initial
begin
	t[8] = 1'b0;
end 
// t[ 7 ]
initial
begin
	t[7] = 1'b0;
end 
// t[ 6 ]
initial
begin
	t[6] = 1'b0;
end 
// t[ 5 ]
initial
begin
	t[5] = 1'b0;
end 
// t[ 4 ]
initial
begin
	t[4] = 1'b0;
end 
// t[ 3 ]
initial
begin
	t[3] = 1'b0;
end 
// t[ 2 ]
initial
begin
	t[2] = 1'b0;
end 
// t[ 1 ]
initial
begin
	t[1] = 1'b1;
end 
// t[ 0 ]
initial
begin
	t[0] = 1'b0;
end 
endmodule

